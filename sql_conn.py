from authpy import read_creds
import psycopg2
from psycopg2.extensions import AsIs


# adapts the numpy_int64 variable generated by python into a psql type of variable to enable its input into psql
def adapt_numpy_int64(numpy_int64):
    return AsIs(numpy_int64)


# connects and loads the tweet to the sql db
def load_google_article_to_sql(post, creds: str = r'/Users/josedow/PycharmProjects/Tweet_automator/creds.json'):
    # authenticate and assign credentials to SQL to execute query.
    creds = read_creds(creds)
    db_host, db_name, port_id = creds['db_host'], creds['db_name'], creds['port_id']
    db_user, db_pass = creds['db_user'], creds['db_pass']

    conn = None
    cur = None

    try:
        conn = psycopg2.connect(
                            host=db_host,
                            dbname=db_name,
                            user=db_user,
                            password=db_pass,
                            port=port_id)

        cur = conn.cursor()

        create_table = ''' CREATE TABLE IF NOT EXISTS tweets_from_google (
                            title           varchar(2000) PRIMARY KEY,
                            author          varchar(500),
                            link            varchar(2500),
                            published_date  varchar(250),
                            description    varchar(100000))'''

        cur.execute(create_table)

        insert_script = ' INSERT INTO tweets_from_google (title, author, link, published_date, description) ' \
                        'VALUES (%s, %s, %s, %s, %s)'

        tweet = (post[0], post[1], post[2], post[3], post[4])

        cur.execute(insert_script, tweet)

        conn.commit()
        print('Successful SQL posting')
    except Exception as error:
        print('Failed to connect to SQL database')
        print(error)
    finally:
        if cur is not None:
            cur.close()
        if conn is not None:
            conn.close()


# pull SQL list
def previous_tweets_from_google(creds: str = r'/Users/josedow/PycharmProjects/Tweet_automator/creds.json'):
    # authenticate and assign credentials to SQL to execute query.
    creds = read_creds(creds)
    db_host, db_name, port_id = creds['db_host'], creds['db_name'], creds['port_id']
    db_user, db_pass = creds['db_user'], creds['db_pass']

    conn = None
    cur = None

    try:
        conn = psycopg2.connect(
                            host=db_host,
                            dbname=db_name,
                            user=db_user,
                            password=db_pass,
                            port=port_id)

        cur = conn.cursor()

        select_table = ''' SELECT title FROM tweets_from_google '''

        cur.execute(select_table)
        data = cur.fetchall()
        conn.commit()
        return data
    except Exception as error:
        print("Failed to pull 'tweets_from_google' database from SQL")
        print(error)
    finally:
        if cur is not None:
            cur.close()
        if conn is not None:
            conn.close()


# connects and loads the tweet to the sql db
def load_kaggle_article_to_sql(post, creds: str = r'/Users/josedow/PycharmProjects/Tweet_automator/creds.json'):
    # authenticate and assign credentials to SQL to execute query.
    creds = read_creds(creds)
    db_host, db_name, port_id = creds['db_host'], creds['db_name'], creds['port_id']
    db_user, db_pass = creds['db_user'], creds['db_pass']

    conn = None
    cur = None

    try:
        conn = psycopg2.connect(
                            host=db_host,
                            dbname=db_name,
                            user=db_user,
                            password=db_pass,
                            port=port_id)

        cur = conn.cursor()

        create_table = ''' CREATE TABLE IF NOT EXISTS tweets_from_kaggle (
                            title           varchar(2000) PRIMARY KEY,
                            author          varchar(500),
                            link            varchar(2500),
                            published_date  varchar(250),
                            description    varchar(100000))'''

        cur.execute(create_table)

        insert_script = ' INSERT INTO tweets_from_kaggle (title, author, link, published_date, description) ' \
                        'VALUES (%s, %s, %s, %s, %s)'

        tweet = (post[0], post[1], post[2], post[3], post[4])

        cur.execute(insert_script, tweet)

        conn.commit()
        print('Successful SQL posting')
    except Exception as error:
        print('Failed to connect to SQL database')
        print(error)
    finally:
        if cur is not None:
            cur.close()
        if conn is not None:
            conn.close()


# pull SQL list
def previous_tweets_from_kaggle(creds: str = r'/Users/josedow/PycharmProjects/Tweet_automator/creds.json'):
    # authenticate and assign credentials to SQL to execute query.
    creds = read_creds(creds)
    db_host, db_name, port_id = creds['db_host'], creds['db_name'], creds['port_id']
    db_user, db_pass = creds['db_user'], creds['db_pass']

    conn = None
    cur = None

    try:
        conn = psycopg2.connect(
                            host=db_host,
                            dbname=db_name,
                            user=db_user,
                            password=db_pass,
                            port=port_id)

        cur = conn.cursor()

        select_table = ''' SELECT title FROM tweets_from_kaggle '''

        cur.execute(select_table)
        data = cur.fetchall()
        conn.commit()
        return data
    except Exception as error:
        print("Failed to pull 'tweets_from_kaggle' database from SQL")
        print(error)
    finally:
        if cur is not None:
            cur.close()
        if conn is not None:
            conn.close()